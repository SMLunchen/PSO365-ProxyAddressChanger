<File version="3.1">
  <FileID>00069b86-57d7-4bef-90c5-90e13b75a467</FileID>
  <Preview>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
15gKmwEgqSAdPHgwqqur46mnnoonnngiZs6cKZ116Wsmfe2sX78+97V0pq8xFTYDQFJBGh8fjyNH
juRuvUG+0tdQ+lo609eYCpsBIElSCWYASJJUghkAkiSVYAaAJEklmAEgSVIJZgBIklSCGQCSJJVg
BoAkSSWYASBJUglmAEiSVIIZAJIklWAGgCRJJZgBIElSCWYASJJUghkAkiSVYAaAJEklmAEgSVIJ
ZgBIklSCGQCSJJVgBoAkSSWYASBJUglmAEiSVIIZAJIklWAGgCRJJZgBIElSCWYASJJUghkAkiSV
YAaAJEklmAEgSVIJZgBIklSCGQCSJJVgBoAkSSWYASBJUglmAEiSVIIZAJIklWAGgCRJJZgBIElS
CWYASJJUghkAkiSVYAaAJEklmAEgSVIJZgBIklSCGQCSJJVgBoAkSSWYASBJUglmAEiSVIIZAJIk
lWAGgCRJJZgBIElSCWYASJJUghkAkiSVYAaAJEklmAEgSVIJZgBIklSCGQCSJJVgBoAkSSWYASBJ
UglmAEiSVIIZAJIklWAGgCRJJZgBIElSCWYASJJUghkAkiSVYAaAJEklmAEgSVIJZgBIklSCGQCS
JJVgBoAkSSWYASBJUglmAEiSVIIZAJIklWAGgCRJJZgBIElSCWYASJJUghkAkiSVYAaAJEklmAEg
SVIJZgBIklSCGQCSJJVgBoAkSSWYASBJUglmAEiSVIIZAJIklWAGgCRJJVhBB8DEBUqSpPO79/aO
FWoARO6CJEnShdCRGBr/8NQ5/PcaAGlFSJKkC6OJ8/fvPQAkSdKF2VkPgKl33Vt7PCIOZf+T3kiS
JF24JYuXrf7dA+Cqq67bumjp8txakCRJF3aLl5XHw48+9rsHAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAEBxfeEL/x90KkCHN91iTwAAAABJRU5ErkJggg==</Preview>
  <Form>EpUF1zKiUgsAACODCAAAAAAABADNltuO2jAQhu8r9R2sXEdAOOyCBJGWsHSrbttVofQSOckUXBwb2U4X+vQd
EqDphoNRS1UhRSSZP/N75vMk3Y/hN4iM9l+/IqSbnxCzXkLPGa21gaTyhYlYPuvKUKokP7rk0C2X
TEBpJkWvWaltfi4JUm5SBT0BqVGUu+QpDTmL3sF6LBcgeuHtLW1FrRuv02hCrd1xiKAJZv6Kz3tS
crWmcaxA62BOxQyUQ6I543hF9JxACqMk105mHK1j/BKUWW8fcZcaOYoohwFLQGxsYeiNS7xGt7oL
PSd9L2Nw/CFmOqsJOANhRuwHCtpe2yWN9vlEH/Do+EcWe1Y9hpVx/KKSbKWkrL3/jva2wkdJ46Np
p5u73WoWvxOfp6KfGiPF1bkIszRDMNH8sz7NQ7le94KGHHDlQ8o1lEpUFjzKiBr07fidFoJTt5Dk
HX1h00KXg3OLaeplbA60noZvRQwrx7cxlYOS2SGWfjAskMkSl48l2+g/AeZTTMwcf6xSm+rhIyZM
p5SPzJpDn0aLQHKpjuuLiOJ2ihalQk6zyy/grOZ02rM6oIa+USyeMHi+OrEp2l6q/SYDfRmzWLI0
EQ9Asfj6Adhsns2YfDBlcwrPLkK5Wcch2O5Ys1xagDXN9SbWzWvV/pDnyxv8T4cR9lCgn7vBZY39
1RCvcfCldHq27LNec7Z41rNla4dY+fmvZsu+kH9ntuDCQtmXq6vDRznf7EwdytVl4G2MUGOw2vv3
oWXRC8jWXdKyfx0WvFrj2mhgcepWBO55PThpip0fAcf+QZzF59878W/2pociTjBRONn91f5Pa07H
dVILAAA=</Form>
  <Code><![CDATA[
$formProxyaddressChanger_Load={
	#TODO: Initialize Form Controls here
	
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$buttonConnectAD_Click={
	Import-Module ActiveDirectory
	$buttonConnectAD.Enabled = $false
	$buttonFetchUser.Enabled = $true
}


$buttonFetchUser_Click={
	$allusers = Get-ADUser -Filter *
	$allusers | Sort-Object -Property Name | ForEach-Object { [void]$allusersbox_.Items.Add($_) }
		
}

$allusersbox_SelectedIndexChanged = {
	$selectedusers = get-aduser -identity $allusersbox.SelectedItem.ToString()
	$userprxyaddresses.Item.a
	
}]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>